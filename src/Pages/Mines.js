import React, { useState } from 'react';
import "../style/Mines.css"

const MinesCasinoComponent = () => {
  const [MinesCount, setMinesCount] = useState(4); // IloÅ›Ä‡ min
  const [minesBoard, setMinesBoard] = useState(Array(25).fill(null)); // Plansza 5x5
  const [revealed, setRevealed] = useState(Array(25).fill(false)); // Odkryte pola
  const [bet, setBet] = useState(1); // ZakÅ‚ad gracza
  const [potentialWin, setPotentialWin] = useState(0); // Potencjalna wygrana
  const [gameOver, setGameOver] = useState(false); // Czy gra siÄ™ zakoÅ„czyÅ‚a
  const [gameStarted, setGameStarted] = useState(false); // Czy gra zostaÅ‚a rozpoczÄ™ta

  // Funkcja do rozpoczÄ™cia gry i umieszczenia min
  const placeMines = () => {
    if (bet <= 0) {
      alert("Musisz postawiÄ‡ zakÅ‚ad, aby rozpoczÄ…Ä‡ grÄ™!");
      return;
    }

    setGameOver(false);
    setGameStarted(true); // Gra jest aktywna
    setPotentialWin(0); // Reset potencjalnej wygranej
    setRevealed(Array(25).fill(false)); // Reset planszy odkrytych pÃ³l

    let newMinesBoard = Array(25).fill(null);
    let bombsIndex = new Set();

    // Losowe rozmieszczenie min
    while (bombsIndex.size < MinesCount) {
      let randomIndex = Math.floor(Math.random() * 25);
      bombsIndex.add(randomIndex);
    }

    bombsIndex.forEach(index => {
      newMinesBoard[index] = "x"; // UmieÅ›Ä‡ minÄ™
    });

    setMinesBoard(newMinesBoard);
  };

  // Funkcja do obsÅ‚ugi zmiany liczby min
  const handleMinesCountChange = (event) => {
    setMinesCount(parseInt(event.target.value));
  };

  // Funkcja obliczajÄ…ca mnoÅ¼nik na podstawie liczby min
  const calculateMultiplier = () => {
    return 25 / (25 - MinesCount); // Proporcja oparta na liczbie min
  };

  // Funkcja do sprawdzenia, czy gracz odkryÅ‚ bombÄ™
  const checkIfBomb = (index) => {
    if (!gameStarted || gameOver || revealed[index]) return; // JeÅ›li gra nie zaczÄ™Å‚a siÄ™, lub siÄ™ zakoÅ„czyÅ‚a, lub pole juÅ¼ odkryte, nic nie rÃ³b

    let updatedRevealed = [...revealed];
    updatedRevealed[index] = true;
    setRevealed(updatedRevealed);

    if (minesBoard[index] === "x") {
      alert("Bomba! Przegrywasz!");
      setGameOver(true);
      setGameStarted(false); // Koniec gry
    } else {
      // ZwiÄ™kszenie potencjalnej wygranej
      const multiplier = calculateMultiplier();
      setPotentialWin(prevWin => prevWin + bet * multiplier); // MnoÅ¼nik zaleÅ¼y od iloÅ›ci min
    }
  };

  // Funkcja obsÅ‚ugujÄ…ca cashout
  const handleCashout = () => {
    if (!gameStarted) return; // Cashout tylko jeÅ›li gra siÄ™ rozpoczÄ™Å‚a
    alert(`Gratulacje! WypÅ‚acasz: ${potentialWin.toFixed(2)}`);
    resetGame();
  };

  // Funkcja resetujÄ…ca grÄ™
  const resetGame = () => {
    setBet(1);
    setPotentialWin(0);
    setGameOver(false);
    setGameStarted(false); // Zresetowanie flagi aktywnoÅ›ci gry
    setMinesBoard(Array(25).fill(null));
    setRevealed(Array(25).fill(false));
  };

  return (
    <div className="minesWrapper">
      <div className='minesPanel'>
        <h3>Wybierz iloÅ›Ä‡ bomb</h3>
        <div>
          <label>
            <input
              type="radio"
              value="4"
              checked={MinesCount === 4}
              onChange={handleMinesCountChange}
            />
            4
          </label>
          <label>
            <input
              type="radio"
              value="8"
              checked={MinesCount === 8}
              onChange={handleMinesCountChange}
            />
            8
          </label>
          <label>
            <input
              type="radio"
              value="16"
              checked={MinesCount === 16}
              onChange={handleMinesCountChange}
            />
            16
          </label>
          <label>
            <input
              type="radio"
              value="24"
              checked={MinesCount === 24}
              onChange={handleMinesCountChange}
            />
            24
          </label>
        </div>
        
        <p>IloÅ›Ä‡ bomb: {MinesCount}</p>
        <input
          type="number"
          value={bet}
          onChange={(e) => setBet(Number(e.target.value))}
          placeholder="Wpisz zakÅ‚ad"
          min="1"
        />
        <button onClick={placeMines}>Start</button>
        <button onClick={handleCashout} disabled={!gameStarted || potentialWin === 0 || gameOver}>
          Cashout
        </button>
        <p>Potencjalna wygrana: {potentialWin.toFixed(2)}</p>
      </div>

      <div className='minesBoardWrapper'>
        {minesBoard.map((cell, index) => (
          <div 
            className={`mineCard ${revealed[index] ? 'revealed' : ''}`}
            key={index}
            onClick={() => checkIfBomb(index)}
          >
            {revealed[index] && (cell === "x" ? "ðŸ’£" : "âœ…")}
          </div>
        ))}
      </div>
    </div>
  );
};

export default MinesCasinoComponent;
